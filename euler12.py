# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?


# Brute force helper method which calculates the number of factors a number has
def num_factors(num):
    factors = 0

    # Only iterate until the square root --> doesn't check both sides of a factor pair (e.g. only find 2 for 2 * 4 = 8)
    for i in range(1, int(num**.5)):
        if num % i == 0:
            # Add two for both parts of the factor pair
            factors += 2

    return factors


if __name__ == '__main__':
    triangle_num = 0
    natural_num = 1

    # Continue generating the sequence until we find a triangle number with more than 500 terms
    while num_factors(triangle_num) < 501:
        triangle_num += natural_num
        natural_num += 1

    print(triangle_num)
